// GENERATED CODE -- DO NOT EDIT!
{{$Package:=.File.Package}}

'use strict';
var grpc = require('grpc');
var {{$Package}}_{{$Package}}_pb = require('../{{$Package}}/{{$Package}}_pb.js');

{{range .File.Service}}
{{range .Method}}
function serialize_{{$Package}}_{{.InputType | splitArray "." | last}}(arg) {
  if (!(arg instanceof {{$Package}}_{{$Package}}_pb.{{.InputType | splitArray "." | last}})) {
    throw new Error('Expected argument of type {{$Package}}.{{.InputType | splitArray "." | last}}');
  }
  return new Buffer(arg.serializeBinary());
}

function deserialize_{{$Package}}_{{.InputType | splitArray "." | last}}(buffer_arg) {
  return {{$Package}}_{{$Package}}_pb.{{.InputType | splitArray "." | last}}.deserializeBinary(new Uint8Array(buffer_arg));
}

function serialize_{{$Package}}_{{.OutputType | splitArray "." | last}}(arg) {
  if (!(arg instanceof {{$Package}}_{{$Package}}_pb.{{.OutputType | splitArray "." | last}})) {
    throw new Error('Expected argument of type {{$Package}}.{{.OutputType | splitArray "." | last}}');
  }
  return new Buffer(arg.serializeBinary());
}

function deserialize_{{$Package}}_{{.OutputType | splitArray "." | last}}(buffer_arg) {
  return {{$Package}}_{{$Package}}_pb.{{.OutputType | splitArray "." | last}}.deserializeBinary(new Uint8Array(buffer_arg));
}
{{end}}
{{end}}

exports.TestServiceClient = grpc.makeGenericClientConstructor({{.Service.Name}}Service);

{{range .File.Service}}
var {{.Name}}Service = exports.{{.Name}}Service = {
{{$serviceName:=.Name}}
{{range .Method}}
  {{.Name | lowerFirst}}: {
    path: '/{{$Package}}.{{$serviceName}}/{{.Name}}',
    requestStream: {{.ClientStreaming | default "false"}},
    responseStream: {{.ServerStreaming | default "false"}},
    requestType: {{$Package}}_{{$Package}}_pb.{{.InputType | splitArray "." | last}},
    responseType: {{$Package}}_{{$Package}}_pb.{{.OutputType | splitArray "." | last}},
    requestSerialize: serialize_{{$Package}}_{{.InputType | splitArray "." | last}},
    requestDeserialize: deserialize_{{$Package}}_{{.InputType | splitArray "." | last}},
    responseSerialize: serialize_{{$Package}}_{{.OutputType | splitArray "." | last}},
    responseDeserialize: deserialize_{{$Package}}_{{.OutputType | splitArray "." | last}},
  },
{{end}}
}

exports.{{.Name}}Client = grpc.makeGenericClientConstructor({{.Name}}Service);
{{end}}
